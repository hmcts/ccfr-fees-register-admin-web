#!groovy

properties([
  pipelineTriggers([cron('0 07 * * 1-5')]),

  parameters([
    string(name: 'URL_TO_TEST', defaultValue: 'https://fees-register.aat.platform.hmcts.net', description: 'The URL you want to run these tests against'),
    string(name: 'FEE_REG_API', defaultValue: 'http://fees-register-api-aat.service.core-compute-aat.internal', description: 'The Fee Reg Api you want to run these tests against'),
    string(name: 'IDAM_API_URL', defaultValue: 'https://idam-api.aat.platform.hmcts.net', description: 'The Idam Api you want to run these tests against to get access token'),
    string(name: 'IDAM_TESTING_SUPPORT_API', defaultValue: 'https://idam-testing-support-api.aat.platform.hmcts.net', description: 'The Idam Testing Support Api you want to run these tests against to create Idam burner Users'),
    string(name: 'REDIRECT_URI', defaultValue: 'https://fees-register.aat.platform.hmcts.net/oauth2/callback', description: 'The Redirect Uri you want to run these tests against to get Idam Access token'),
  ])
])

@Library("Infrastructure")

def product = "fees-register"
def component = "frontend"

def secrets = [
  'fees-register-${env}'      : [
    secret('freg-idam-client-secret', 'CLIENT_SECRET')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}


withNightlyPipeline("nodejs", product, component) {

  env.TEST_URL = params.URL_TO_TEST
  env.FEE_REG_API = params.FEE_REG_API
  env.IDAM_API_URL = params.IDAM_API_URL
  env.IDAM_TESTING_SUPPORT_API = params.IDAM_TESTING_SUPPORT_API
  env.REDIRECT_URI = params.REDIRECT_URI
  env.NIGHTLY_TEST= true

  loadVaultSecrets(secrets)
  enableFullFunctionalTest()
  enableFortifyScan()
  enableCrossBrowserTest()
  enableSecurityScan()
  afterAlways('checkout') {
    sh "yarn cache clean"
    echo 'ccfr-fees-register-admin-web checked out'
  }
  afterAlways('build') {
    sh 'yarn setup'
    sh 'mkdir -p functional-output'
    sh 'chmod +x bin/run-crossbrowser-tests.sh'
  }
  afterAlways('fortify-scan') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
  }

  afterAlways('fullFunctionalTest') {
    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "functional-output",
      reportFiles          : "fees-reg-admin-web-e2e-result.html",
      reportName           : "Fees Reg Admin Web E2E tests result"
    ]
    sh 'yarn test:a11y'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
  }
}
