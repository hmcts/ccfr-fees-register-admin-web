{"type":"auditAdvisory","data":{"resolution":{"id":1004153,"path":"codacy-coverage>jacoco-parse>mocha>mkdirp>minimist","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.0.8","paths":["codacy-coverage>jacoco-parse>mocha>mkdirp>minimist"]}],"metadata":null,"vulnerable_versions":"<0.2.1","module_name":"minimist","severity":"moderate","github_advisory_id":"GHSA-vh95-rmgr-6w4m","cves":["CVE-2020-7598"],"access":"public","patched_versions":">=0.2.1","updated":"2020-04-03T21:42:10.000Z","recommendation":"Upgrade to version 0.2.1 or later","cwe":"CWE-915","found_by":null,"deleted":null,"id":1004153,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2020-7598\n- https://github.com/advisories/GHSA-vh95-rmgr-6w4m","created":"2021-10-07T07:31:50.685Z","reported_by":null,"title":"Prototype Pollution in minimist","npm_advisory_id":null,"overview":"Affected versions of `minimist` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `--__proto__.y=Polluted` adds a `y` property with value `Polluted` to all objects. The argument `--__proto__=Polluted` raises and uncaught error and crashes the application.  \nThis is exploitable if attackers have control over the arguments being passed to `minimist`.\n\n\n\n## Recommendation\n\nUpgrade to versions 0.2.1, 1.2.3 or later.","url":"https://github.com/advisories/GHSA-vh95-rmgr-6w4m"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1004746,"path":"class-validator","dev":false,"bundled":false,"optional":false},"advisory":{"findings":[{"version":"0.8.5","paths":["class-validator"]}],"metadata":null,"vulnerable_versions":"<=0.13.1","module_name":"class-validator","severity":"moderate","github_advisory_id":"GHSA-fj58-h2fr-3pp2","cves":["CVE-2019-18413"],"access":"public","patched_versions":"<0.0.0","updated":"2021-10-15T15:15:24.000Z","recommendation":"None","cwe":"CWE-79","found_by":null,"deleted":null,"id":1004746,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2019-18413\n- https://github.com/advisories/GHSA-fj58-h2fr-3pp2","created":"2021-10-15T16:00:35.888Z","reported_by":null,"title":"SQL Injection and Cross-site Scripting in class-validator","npm_advisory_id":null,"overview":"In TypeStack class-validator 0.10.2, validate() input validation can be bypassed because certain internal attributes can be overwritten via a conflicting name. Even though there is an optional forbidUnknownValues parameter that can be used to reduce the risk of this bypass, this option is not documented and thus most developers configure input validation in the vulnerable default manner. With this vulnerability, attackers can launch SQL Injection or XSS attacks by injecting arbitrary malicious input. NOTE: a software maintainer agrees with the \"is not documented\" finding but suggests that much of the responsibility for the risk lies in a different product.","url":"https://github.com/advisories/GHSA-fj58-h2fr-3pp2"}}}
