{"type":"auditAdvisory","data":{"resolution":{"id":1518,"path":"jquery","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.4.0","paths":["jquery"]}],"id":1518,"created":"2020-04-30T18:19:09.542Z","updated":"2020-05-13T19:06:57.721Z","deleted":null,"title":"Cross-Site Scripting","found_by":{"link":"","name":"Masato Kinugawa","email":""},"reported_by":{"link":"","name":"Masato Kinugawa","email":""},"module_name":"jquery","cves":["CVE-2020-11022"],"vulnerable_versions":"<3.5.0","patched_versions":">=3.5.0","overview":"Versions of `jquery` prior to 3.5.0 are vulnerable to Cross-Site Scripting. Passing HTML from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. .html(), .append(), and others) may execute arbitrary JavaScript in a victim's browser.","recommendation":"Upgrade to version 3.5.0 or later.","references":"- [GitHub Advisory](https://github.com/advisories/GHSA-gxr4-xjj5-5px2)","access":"public","severity":"moderate","cwe":"CWE-79","metadata":{"module_type":"","exploitability":3,"affected_components":""},"url":"https://npmjs.com/advisories/1518"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1179,"path":"i18next-conv>mkdirp>minimist","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.0.8","paths":["codacy-coverage>jacoco-parse>mocha>mkdirp>minimist","i18next-conv>mkdirp>minimist","multer>mkdirp>minimist","nock>mkdirp>minimist"]},{"version":"1.2.0","paths":["config>json5>minimist","tsconfig-paths>json5>minimist","tsconfig-paths>minimist"]}],"id":1179,"created":"2019-09-23T15:01:43.049Z","updated":"2020-03-18T19:41:45.921Z","deleted":null,"title":"Prototype Pollution","found_by":{"link":"https://www.checkmarx.com/resources/blog/","name":"Checkmarx Research Team","email":""},"reported_by":{"link":"https://www.checkmarx.com/resources/blog/","name":"Checkmarx Research Team","email":""},"module_name":"minimist","cves":[],"vulnerable_versions":"<0.2.1 || >=1.0.0 <1.2.3","patched_versions":">=0.2.1 <1.0.0 || >=1.2.3","overview":"Affected versions of `minimist` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `--__proto__.y=Polluted` adds a `y` property with value `Polluted` to all objects. The argument `--__proto__=Polluted` raises and uncaught error and crashes the application.  \nThis is exploitable if attackers have control over the arguments being passed to `minimist`.\n","recommendation":"Upgrade to versions 0.2.1, 1.2.3 or later.","references":"- [GitHub commit 1](https://github.com/substack/minimist/commit/4cf1354839cb972e38496d35e12f806eea92c11f#diff-a1e0ee62c91705696ddb71aa30ad4f95)\n- [GitHub commit 2](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)","access":"public","severity":"low","cwe":"CWE-471","metadata":{"module_type":"","exploitability":1,"affected_components":""},"url":"https://npmjs.com/advisories/1179"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1179,"path":"multer>mkdirp>minimist","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.0.8","paths":["codacy-coverage>jacoco-parse>mocha>mkdirp>minimist","i18next-conv>mkdirp>minimist","multer>mkdirp>minimist","nock>mkdirp>minimist"]},{"version":"1.2.0","paths":["config>json5>minimist","tsconfig-paths>json5>minimist","tsconfig-paths>minimist"]}],"id":1179,"created":"2019-09-23T15:01:43.049Z","updated":"2020-03-18T19:41:45.921Z","deleted":null,"title":"Prototype Pollution","found_by":{"link":"https://www.checkmarx.com/resources/blog/","name":"Checkmarx Research Team","email":""},"reported_by":{"link":"https://www.checkmarx.com/resources/blog/","name":"Checkmarx Research Team","email":""},"module_name":"minimist","cves":[],"vulnerable_versions":"<0.2.1 || >=1.0.0 <1.2.3","patched_versions":">=0.2.1 <1.0.0 || >=1.2.3","overview":"Affected versions of `minimist` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `--__proto__.y=Polluted` adds a `y` property with value `Polluted` to all objects. The argument `--__proto__=Polluted` raises and uncaught error and crashes the application.  \nThis is exploitable if attackers have control over the arguments being passed to `minimist`.\n","recommendation":"Upgrade to versions 0.2.1, 1.2.3 or later.","references":"- [GitHub commit 1](https://github.com/substack/minimist/commit/4cf1354839cb972e38496d35e12f806eea92c11f#diff-a1e0ee62c91705696ddb71aa30ad4f95)\n- [GitHub commit 2](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)","access":"public","severity":"low","cwe":"CWE-471","metadata":{"module_type":"","exploitability":1,"affected_components":""},"url":"https://npmjs.com/advisories/1179"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1179,"path":"nock>mkdirp>minimist","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.0.8","paths":["codacy-coverage>jacoco-parse>mocha>mkdirp>minimist","i18next-conv>mkdirp>minimist","multer>mkdirp>minimist","nock>mkdirp>minimist"]},{"version":"1.2.0","paths":["config>json5>minimist","tsconfig-paths>json5>minimist","tsconfig-paths>minimist"]}],"id":1179,"created":"2019-09-23T15:01:43.049Z","updated":"2020-03-18T19:41:45.921Z","deleted":null,"title":"Prototype Pollution","found_by":{"link":"https://www.checkmarx.com/resources/blog/","name":"Checkmarx Research Team","email":""},"reported_by":{"link":"https://www.checkmarx.com/resources/blog/","name":"Checkmarx Research Team","email":""},"module_name":"minimist","cves":[],"vulnerable_versions":"<0.2.1 || >=1.0.0 <1.2.3","patched_versions":">=0.2.1 <1.0.0 || >=1.2.3","overview":"Affected versions of `minimist` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `--__proto__.y=Polluted` adds a `y` property with value `Polluted` to all objects. The argument `--__proto__=Polluted` raises and uncaught error and crashes the application.  \nThis is exploitable if attackers have control over the arguments being passed to `minimist`.\n","recommendation":"Upgrade to versions 0.2.1, 1.2.3 or later.","references":"- [GitHub commit 1](https://github.com/substack/minimist/commit/4cf1354839cb972e38496d35e12f806eea92c11f#diff-a1e0ee62c91705696ddb71aa30ad4f95)\n- [GitHub commit 2](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)","access":"public","severity":"low","cwe":"CWE-471","metadata":{"module_type":"","exploitability":1,"affected_components":""},"url":"https://npmjs.com/advisories/1179"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1179,"path":"config>json5>minimist","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.0.8","paths":["codacy-coverage>jacoco-parse>mocha>mkdirp>minimist","i18next-conv>mkdirp>minimist","multer>mkdirp>minimist","nock>mkdirp>minimist"]},{"version":"1.2.0","paths":["config>json5>minimist","tsconfig-paths>json5>minimist","tsconfig-paths>minimist"]}],"id":1179,"created":"2019-09-23T15:01:43.049Z","updated":"2020-03-18T19:41:45.921Z","deleted":null,"title":"Prototype Pollution","found_by":{"link":"https://www.checkmarx.com/resources/blog/","name":"Checkmarx Research Team","email":""},"reported_by":{"link":"https://www.checkmarx.com/resources/blog/","name":"Checkmarx Research Team","email":""},"module_name":"minimist","cves":[],"vulnerable_versions":"<0.2.1 || >=1.0.0 <1.2.3","patched_versions":">=0.2.1 <1.0.0 || >=1.2.3","overview":"Affected versions of `minimist` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `--__proto__.y=Polluted` adds a `y` property with value `Polluted` to all objects. The argument `--__proto__=Polluted` raises and uncaught error and crashes the application.  \nThis is exploitable if attackers have control over the arguments being passed to `minimist`.\n","recommendation":"Upgrade to versions 0.2.1, 1.2.3 or later.","references":"- [GitHub commit 1](https://github.com/substack/minimist/commit/4cf1354839cb972e38496d35e12f806eea92c11f#diff-a1e0ee62c91705696ddb71aa30ad4f95)\n- [GitHub commit 2](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)","access":"public","severity":"low","cwe":"CWE-471","metadata":{"module_type":"","exploitability":1,"affected_components":""},"url":"https://npmjs.com/advisories/1179"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1179,"path":"tsconfig-paths>json5>minimist","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.0.8","paths":["codacy-coverage>jacoco-parse>mocha>mkdirp>minimist","i18next-conv>mkdirp>minimist","multer>mkdirp>minimist","nock>mkdirp>minimist"]},{"version":"1.2.0","paths":["config>json5>minimist","tsconfig-paths>json5>minimist","tsconfig-paths>minimist"]}],"id":1179,"created":"2019-09-23T15:01:43.049Z","updated":"2020-03-18T19:41:45.921Z","deleted":null,"title":"Prototype Pollution","found_by":{"link":"https://www.checkmarx.com/resources/blog/","name":"Checkmarx Research Team","email":""},"reported_by":{"link":"https://www.checkmarx.com/resources/blog/","name":"Checkmarx Research Team","email":""},"module_name":"minimist","cves":[],"vulnerable_versions":"<0.2.1 || >=1.0.0 <1.2.3","patched_versions":">=0.2.1 <1.0.0 || >=1.2.3","overview":"Affected versions of `minimist` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `--__proto__.y=Polluted` adds a `y` property with value `Polluted` to all objects. The argument `--__proto__=Polluted` raises and uncaught error and crashes the application.  \nThis is exploitable if attackers have control over the arguments being passed to `minimist`.\n","recommendation":"Upgrade to versions 0.2.1, 1.2.3 or later.","references":"- [GitHub commit 1](https://github.com/substack/minimist/commit/4cf1354839cb972e38496d35e12f806eea92c11f#diff-a1e0ee62c91705696ddb71aa30ad4f95)\n- [GitHub commit 2](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)","access":"public","severity":"low","cwe":"CWE-471","metadata":{"module_type":"","exploitability":1,"affected_components":""},"url":"https://npmjs.com/advisories/1179"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1179,"path":"tsconfig-paths>minimist","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.0.8","paths":["codacy-coverage>jacoco-parse>mocha>mkdirp>minimist","i18next-conv>mkdirp>minimist","multer>mkdirp>minimist","nock>mkdirp>minimist"]},{"version":"1.2.0","paths":["config>json5>minimist","tsconfig-paths>json5>minimist","tsconfig-paths>minimist"]}],"id":1179,"created":"2019-09-23T15:01:43.049Z","updated":"2020-03-18T19:41:45.921Z","deleted":null,"title":"Prototype Pollution","found_by":{"link":"https://www.checkmarx.com/resources/blog/","name":"Checkmarx Research Team","email":""},"reported_by":{"link":"https://www.checkmarx.com/resources/blog/","name":"Checkmarx Research Team","email":""},"module_name":"minimist","cves":[],"vulnerable_versions":"<0.2.1 || >=1.0.0 <1.2.3","patched_versions":">=0.2.1 <1.0.0 || >=1.2.3","overview":"Affected versions of `minimist` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `--__proto__.y=Polluted` adds a `y` property with value `Polluted` to all objects. The argument `--__proto__=Polluted` raises and uncaught error and crashes the application.  \nThis is exploitable if attackers have control over the arguments being passed to `minimist`.\n","recommendation":"Upgrade to versions 0.2.1, 1.2.3 or later.","references":"- [GitHub commit 1](https://github.com/substack/minimist/commit/4cf1354839cb972e38496d35e12f806eea92c11f#diff-a1e0ee62c91705696ddb71aa30ad4f95)\n- [GitHub commit 2](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)","access":"public","severity":"low","cwe":"CWE-471","metadata":{"module_type":"","exploitability":1,"affected_components":""},"url":"https://npmjs.com/advisories/1179"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1523,"path":"@hmcts/properties-volume>lodash","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"4.17.15","paths":["@hmcts/properties-volume>lodash","codacy-coverage>lodash","codacy-coverage>request-promise>request-promise-core>lodash","request-promise-native>request-promise-core>lodash","nock>lodash"]}],"id":1523,"created":"2020-05-20T01:36:49.357Z","updated":"2020-07-10T19:23:46.395Z","deleted":null,"title":"Prototype Pollution","found_by":{"link":"","name":"posix","email":""},"reported_by":{"link":"","name":"posix","email":""},"module_name":"lodash","cves":["CVE-2019-10744"],"vulnerable_versions":"<4.17.19","patched_versions":">=4.17.19","overview":"Versions of `lodash` prior to 4.17.19 are vulnerable to Prototype Pollution.  The function `zipObjectDeep` allows a malicious user to modify the prototype of `Object` if the property identifiers are user-supplied. Being affected by this issue requires zipping objects based on user-provided property arrays.  \n\nThis vulnerability causes the addition or modification of an existing property that will exist on all objects and may lead to Denial of Service or Code Execution under specific circumstances.","recommendation":"Upgrade to version 4.17.19 or later.","references":"- [HackerOne Report](https://hackerone.com/reports/712065)\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4744)","access":"public","severity":"low","cwe":"CWE-471","metadata":{"module_type":"","exploitability":3,"affected_components":""},"url":"https://npmjs.com/advisories/1523"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1523,"path":"codacy-coverage>request-promise>request-promise-core>lodash","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"4.17.15","paths":["@hmcts/properties-volume>lodash","codacy-coverage>lodash","codacy-coverage>request-promise>request-promise-core>lodash","request-promise-native>request-promise-core>lodash","nock>lodash"]}],"id":1523,"created":"2020-05-20T01:36:49.357Z","updated":"2020-07-10T19:23:46.395Z","deleted":null,"title":"Prototype Pollution","found_by":{"link":"","name":"posix","email":""},"reported_by":{"link":"","name":"posix","email":""},"module_name":"lodash","cves":["CVE-2019-10744"],"vulnerable_versions":"<4.17.19","patched_versions":">=4.17.19","overview":"Versions of `lodash` prior to 4.17.19 are vulnerable to Prototype Pollution.  The function `zipObjectDeep` allows a malicious user to modify the prototype of `Object` if the property identifiers are user-supplied. Being affected by this issue requires zipping objects based on user-provided property arrays.  \n\nThis vulnerability causes the addition or modification of an existing property that will exist on all objects and may lead to Denial of Service or Code Execution under specific circumstances.","recommendation":"Upgrade to version 4.17.19 or later.","references":"- [HackerOne Report](https://hackerone.com/reports/712065)\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4744)","access":"public","severity":"low","cwe":"CWE-471","metadata":{"module_type":"","exploitability":3,"affected_components":""},"url":"https://npmjs.com/advisories/1523"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1523,"path":"request-promise-native>request-promise-core>lodash","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"4.17.15","paths":["@hmcts/properties-volume>lodash","codacy-coverage>lodash","codacy-coverage>request-promise>request-promise-core>lodash","request-promise-native>request-promise-core>lodash","nock>lodash"]}],"id":1523,"created":"2020-05-20T01:36:49.357Z","updated":"2020-07-10T19:23:46.395Z","deleted":null,"title":"Prototype Pollution","found_by":{"link":"","name":"posix","email":""},"reported_by":{"link":"","name":"posix","email":""},"module_name":"lodash","cves":["CVE-2019-10744"],"vulnerable_versions":"<4.17.19","patched_versions":">=4.17.19","overview":"Versions of `lodash` prior to 4.17.19 are vulnerable to Prototype Pollution.  The function `zipObjectDeep` allows a malicious user to modify the prototype of `Object` if the property identifiers are user-supplied. Being affected by this issue requires zipping objects based on user-provided property arrays.  \n\nThis vulnerability causes the addition or modification of an existing property that will exist on all objects and may lead to Denial of Service or Code Execution under specific circumstances.","recommendation":"Upgrade to version 4.17.19 or later.","references":"- [HackerOne Report](https://hackerone.com/reports/712065)\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4744)","access":"public","severity":"low","cwe":"CWE-471","metadata":{"module_type":"","exploitability":3,"affected_components":""},"url":"https://npmjs.com/advisories/1523"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1523,"path":"nock>lodash","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"4.17.15","paths":["@hmcts/properties-volume>lodash","codacy-coverage>lodash","codacy-coverage>request-promise>request-promise-core>lodash","request-promise-native>request-promise-core>lodash","nock>lodash"]}],"id":1523,"created":"2020-05-20T01:36:49.357Z","updated":"2020-07-10T19:23:46.395Z","deleted":null,"title":"Prototype Pollution","found_by":{"link":"","name":"posix","email":""},"reported_by":{"link":"","name":"posix","email":""},"module_name":"lodash","cves":["CVE-2019-10744"],"vulnerable_versions":"<4.17.19","patched_versions":">=4.17.19","overview":"Versions of `lodash` prior to 4.17.19 are vulnerable to Prototype Pollution.  The function `zipObjectDeep` allows a malicious user to modify the prototype of `Object` if the property identifiers are user-supplied. Being affected by this issue requires zipping objects based on user-provided property arrays.  \n\nThis vulnerability causes the addition or modification of an existing property that will exist on all objects and may lead to Denial of Service or Code Execution under specific circumstances.","recommendation":"Upgrade to version 4.17.19 or later.","references":"- [HackerOne Report](https://hackerone.com/reports/712065)\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4744)","access":"public","severity":"low","cwe":"CWE-471","metadata":{"module_type":"","exploitability":3,"affected_components":""},"url":"https://npmjs.com/advisories/1523"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1556,"path":"codecov>teeny-request>node-fetch","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.6.0","paths":["codecov>teeny-request>node-fetch"]}],"id":1556,"created":"2020-09-10T17:55:53.926Z","updated":"2020-09-10T17:55:53.926Z","deleted":null,"title":"Denial of Service","found_by":{"link":"","name":"Unknown","email":""},"reported_by":{"link":"","name":"Unknown","email":""},"module_name":"node-fetch","cves":["CVE-2020-15168"],"vulnerable_versions":"< 2.6.1 || >= 3.0.0-beta.1 < 3.0.0-beta.9","patched_versions":">=2.6.1 <3.0.0-beta.1|| >= 3.0.0-beta.9","overview":"Node Fetch did not honor the size option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n\nFor most people, this fix will have a little or no impact. However, if you are relying on node-fetch to gate files above a size, the impact could be significant, for example: If you don't double-check the size of the data after fetch() has completed, your JS thread could get tied up doing work on a large file (DoS) and/or cost you money in computing.","recommendation":"Upgrade to version 2.6.1 or 3.0.0-beta.9","references":"- https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r","access":"public","severity":"low","cwe":"CWE-400","metadata":{"module_type":"","exploitability":3,"affected_components":""},"url":"https://npmjs.com/advisories/1556"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1179,"path":"codacy-coverage>jacoco-parse>mocha>mkdirp>minimist","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.0.8","paths":["codacy-coverage>jacoco-parse>mocha>mkdirp>minimist","i18next-conv>mkdirp>minimist","multer>mkdirp>minimist","nock>mkdirp>minimist"]},{"version":"1.2.0","paths":["config>json5>minimist","tsconfig-paths>json5>minimist","tsconfig-paths>minimist"]}],"id":1179,"created":"2019-09-23T15:01:43.049Z","updated":"2020-03-18T19:41:45.921Z","deleted":null,"title":"Prototype Pollution","found_by":{"link":"https://www.checkmarx.com/resources/blog/","name":"Checkmarx Research Team","email":""},"reported_by":{"link":"https://www.checkmarx.com/resources/blog/","name":"Checkmarx Research Team","email":""},"module_name":"minimist","cves":[],"vulnerable_versions":"<0.2.1 || >=1.0.0 <1.2.3","patched_versions":">=0.2.1 <1.0.0 || >=1.2.3","overview":"Affected versions of `minimist` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `--__proto__.y=Polluted` adds a `y` property with value `Polluted` to all objects. The argument `--__proto__=Polluted` raises and uncaught error and crashes the application.  \nThis is exploitable if attackers have control over the arguments being passed to `minimist`.\n","recommendation":"Upgrade to versions 0.2.1, 1.2.3 or later.","references":"- [GitHub commit 1](https://github.com/substack/minimist/commit/4cf1354839cb972e38496d35e12f806eea92c11f#diff-a1e0ee62c91705696ddb71aa30ad4f95)\n- [GitHub commit 2](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)","access":"public","severity":"low","cwe":"CWE-471","metadata":{"module_type":"","exploitability":1,"affected_components":""},"url":"https://npmjs.com/advisories/1179"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1500,"path":"gulp>gulp-cli>yargs>yargs-parser","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"5.0.0","paths":["gulp>gulp-cli>yargs>yargs-parser"]}],"id":1500,"created":"2020-03-26T19:21:50.174Z","updated":"2020-05-01T01:05:15.020Z","deleted":null,"title":"Prototype Pollution","found_by":{"link":"","name":"Snyk Security Team","email":""},"reported_by":{"link":"","name":"Snyk Security Team","email":""},"module_name":"yargs-parser","cves":[],"vulnerable_versions":"<13.1.2 || >=14.0.0 <15.0.1 || >=16.0.0 <18.1.2","patched_versions":">=13.1.2 <14.0.0 || >=15.0.1 <16.0.0 || >=18.1.2","overview":"Affected versions of `yargs-parser` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `--foo.__proto__.bar baz'` adds a `bar` property with value `baz` to all objects. This is only exploitable if attackers have control over the arguments being passed to `yargs-parser`.\n","recommendation":"Upgrade to versions 13.1.2, 15.0.1, 18.1.1 or later.","references":"- [Snyk Report](https://snyk.io/vuln/SNYK-JS-YARGSPARSER-560381)","access":"public","severity":"low","cwe":"CWE-471","metadata":{"module_type":"","exploitability":1,"affected_components":""},"url":"https://npmjs.com/advisories/1500"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1523,"path":"codacy-coverage>lodash","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"4.17.15","paths":["@hmcts/properties-volume>lodash","codacy-coverage>lodash","codacy-coverage>request-promise>request-promise-core>lodash","request-promise-native>request-promise-core>lodash","nock>lodash"]}],"id":1523,"created":"2020-05-20T01:36:49.357Z","updated":"2020-07-10T19:23:46.395Z","deleted":null,"title":"Prototype Pollution","found_by":{"link":"","name":"posix","email":""},"reported_by":{"link":"","name":"posix","email":""},"module_name":"lodash","cves":["CVE-2019-10744"],"vulnerable_versions":"<4.17.19","patched_versions":">=4.17.19","overview":"Versions of `lodash` prior to 4.17.19 are vulnerable to Prototype Pollution.  The function `zipObjectDeep` allows a malicious user to modify the prototype of `Object` if the property identifiers are user-supplied. Being affected by this issue requires zipping objects based on user-provided property arrays.  \n\nThis vulnerability causes the addition or modification of an existing property that will exist on all objects and may lead to Denial of Service or Code Execution under specific circumstances.","recommendation":"Upgrade to version 4.17.19 or later.","references":"- [HackerOne Report](https://hackerone.com/reports/712065)\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4744)","access":"public","severity":"low","cwe":"CWE-471","metadata":{"module_type":"","exploitability":3,"affected_components":""},"url":"https://npmjs.com/advisories/1523"}}}
